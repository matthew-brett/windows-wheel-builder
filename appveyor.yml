# vim ft=yaml
# CI on Windows via appveyor
# Largely from:
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

os: Visual Studio 2015

environment:
    global:
      NUMPY_COMMIT: v1.13.0
      RACK_URL: https://3f23b170c54c2533c070-1c8a9b3114517dc5fe17b7c3f8c63a43.ssl.cf2.rackcdn.com
      OPENBLAS_COMMIT: v0.2.19
      OPENBLAS_ROOT: c:\opt
      WHEELHOUSE_UPLOADER_USERNAME: travis-worker
      WHEELHOUSE_UPLOADER_SECRET:
        secure:
            sb0P1lcBU2GniiKb5m1mpg6kGwWOEC9DtWRqg00+BH/ATYadhCqrpmKUdHJhPTwJ

    matrix:

    - PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python27-x64"
    - PYTHON: "C:\\Python34"
    - PYTHON: "C:\\Python34-x64"
    - PYTHON: "C:\\Python35"
    - PYTHON: "C:\\Python35-x64"
    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python36-x64"

install:
  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "Installed SDKs:"
  - dir "C:/Program Files/Microsoft SDKs/Windows"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%

  # Get Python bitness
  # https://stackoverflow.com/questions/1746475/windows-batch-help-in-setting-a-variable-from-command-output#4509885
  - set PY_CMD=python -c "import platform; print(platform.architecture()[0][:2])"
  - for /f "tokens=1 delims=" %%i in ('%PY_CMD%') do set PYTHON_ARCH=%%i

  # Fix MSVC builds for 64-bit Python
  # See
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  - python -m pip install --upgrade pip
  - pip install delocate cython
  # Pin wheel to 0.26 to avoid Windows ABI tag for built wheel
  - pip install wheel==0.26
  - git clone https://github.com/numpy/numpy.git
  # Download built openblas libraries
  - PATH=%PATH%;c:\msys64\usr\bin
  - set OPENBLAS_FNAME=openblas-%OPENBLAS_COMMIT%_win%PYTHON_ARCH%.tar.gz
  - curl -L %RACK_URL%/%OPENBLAS_FNAME% -o %OPENBLAS_FNAME%
  - if not exist "%OPENBLAS_ROOT%" mkdir %OPENBLAS_ROOT%
  - bash -c "fn=$PWD/$OPENBLAS_FNAME ; cd $OPENBLAS_ROOT && tar zxvf $fn"

build_script:
  # Build and install the wheel
  - cd numpy
  - git checkout %NUMPY_COMMIT%
  - python ..\build_numpy.py . %PYTHON_ARCH% %OPENBLAS_ROOT%
  - cd dist
  - pip install --pre --no-index -f . numpy
  - pip install nose
  # Delete the original libraries
  - rmdir /s /q %OPENBLAS_ROOT%\%PYTHON_ARCH%

test_script:
  # Run the project tests
  - python -c "import numpy; numpy.test()"
  - cd ..

after_test:
  # If tests are successful, create binary packages for the project.
  - dir dist

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*.*

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - pip install wheelhouse-uploader
  - python -m wheelhouse_uploader upload --no-ssl-check --local-folder=dist win-atlas-wheels
